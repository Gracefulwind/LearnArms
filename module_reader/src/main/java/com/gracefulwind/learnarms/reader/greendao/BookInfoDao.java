package com.gracefulwind.learnarms.reader.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gracefulwind.learnarms.reader.db.BookInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_INFO".
*/
public class BookInfoDao extends AbstractDao<BookInfo, Long> {

    public static final String TABLENAME = "BOOK_INFO";

    /**
     * Properties of entity BookInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Author = new Property(3, String.class, "author", false, "AUTHOR");
        public final static Property Kind = new Property(4, String.class, "kind", false, "KIND");
        public final static Property Origin = new Property(5, String.class, "origin", false, "ORIGIN");
        public final static Property UpdateTime = new Property(6, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property LastChapter = new Property(7, String.class, "lastChapter", false, "LAST_CHAPTER");
        public final static Property CoverUrl = new Property(8, String.class, "coverUrl", false, "COVER_URL");
        public final static Property Last_chapter = new Property(9, String.class, "last_chapter", false, "LAST_CHAPTER");
        public final static Property ChapterNumber = new Property(10, long.class, "chapterNumber", false, "CHAPTER_NUMBER");
        public final static Property BookDesc = new Property(11, String.class, "bookDesc", false, "BOOK_DESC");
        public final static Property State = new Property(12, int.class, "state", false, "STATE");
        public final static Property Delete = new Property(13, int.class, "delete", false, "DELETE");
    }


    public BookInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BookInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"UID\" TEXT NOT NULL UNIQUE ," + // 1: uid
                "\"NAME\" TEXT," + // 2: name
                "\"AUTHOR\" TEXT," + // 3: author
                "\"KIND\" TEXT," + // 4: kind
                "\"ORIGIN\" TEXT," + // 5: origin
                "\"UPDATE_TIME\" TEXT," + // 6: updateTime
                "\"LAST_CHAPTER\" TEXT," + // 7: lastChapter
                "\"COVER_URL\" TEXT," + // 8: coverUrl
                "\"LAST_CHAPTER\" TEXT," + // 9: last_chapter
                "\"CHAPTER_NUMBER\" INTEGER NOT NULL ," + // 10: chapterNumber
                "\"BOOK_DESC\" TEXT," + // 11: bookDesc
                "\"STATE\" INTEGER NOT NULL ," + // 12: state
                "\"DELETE\" INTEGER NOT NULL );"); // 13: delete
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getUid());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String kind = entity.getKind();
        if (kind != null) {
            stmt.bindString(5, kind);
        }
 
        String origin = entity.getOrigin();
        if (origin != null) {
            stmt.bindString(6, origin);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(7, updateTime);
        }
 
        String lastChapter = entity.getLastChapter();
        if (lastChapter != null) {
            stmt.bindString(8, lastChapter);
        }
 
        String coverUrl = entity.getCoverUrl();
        if (coverUrl != null) {
            stmt.bindString(9, coverUrl);
        }
 
        String last_chapter = entity.getLast_chapter();
        if (last_chapter != null) {
            stmt.bindString(10, last_chapter);
        }
        stmt.bindLong(11, entity.getChapterNumber());
 
        String bookDesc = entity.getBookDesc();
        if (bookDesc != null) {
            stmt.bindString(12, bookDesc);
        }
        stmt.bindLong(13, entity.getState());
        stmt.bindLong(14, entity.getDelete());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getUid());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String kind = entity.getKind();
        if (kind != null) {
            stmt.bindString(5, kind);
        }
 
        String origin = entity.getOrigin();
        if (origin != null) {
            stmt.bindString(6, origin);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(7, updateTime);
        }
 
        String lastChapter = entity.getLastChapter();
        if (lastChapter != null) {
            stmt.bindString(8, lastChapter);
        }
 
        String coverUrl = entity.getCoverUrl();
        if (coverUrl != null) {
            stmt.bindString(9, coverUrl);
        }
 
        String last_chapter = entity.getLast_chapter();
        if (last_chapter != null) {
            stmt.bindString(10, last_chapter);
        }
        stmt.bindLong(11, entity.getChapterNumber());
 
        String bookDesc = entity.getBookDesc();
        if (bookDesc != null) {
            stmt.bindString(12, bookDesc);
        }
        stmt.bindLong(13, entity.getState());
        stmt.bindLong(14, entity.getDelete());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public BookInfo readEntity(Cursor cursor, int offset) {
        BookInfo entity = new BookInfo( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // kind
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // origin
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // updateTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lastChapter
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // coverUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // last_chapter
            cursor.getLong(offset + 10), // chapterNumber
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // bookDesc
            cursor.getInt(offset + 12), // state
            cursor.getInt(offset + 13) // delete
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUid(cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKind(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrigin(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdateTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLastChapter(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCoverUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLast_chapter(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setChapterNumber(cursor.getLong(offset + 10));
        entity.setBookDesc(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setState(cursor.getInt(offset + 12));
        entity.setDelete(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
